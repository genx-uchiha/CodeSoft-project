import tkinter as tk
from tkinter import ttk, messagebox

class ContactManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book")

        self.style = ttk.Style()
        self.style.configure("TFrame", background="#d1a971")
        self.style.configure("TLabel", background="#d1a971")
        self.style.configure("TButton", background="#d1a971", padding=(10, 5), font=('Arial', 10))
        self.style.configure("TEntry", fieldbackground="#f7f3e9")

        self.contacts = {}

        self.frame = ttk.Frame(root)
        self.frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")

        self.create_interface()

    def create_interface(self):
        self.name_label = ttk.Label(self.frame, text="Name:")
        self.name_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")

        self.name_entry = ttk.Entry(self.frame, width=30)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5, sticky="w")

        self.phone_label = ttk.Label(self.frame, text="Phone Number:")
        self.phone_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")

        self.phone_entry = ttk.Entry(self.frame, width=30)
        self.phone_entry.grid(row=1, column=1, padx=10, pady=5, sticky="w")

        self.email_label = ttk.Label(self.frame, text="Email:")
        self.email_label.grid(row=2, column=0, padx=10, pady=5, sticky="w")

        self.email_entry = ttk.Entry(self.frame, width=30)
        self.email_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")

        self.address_label = ttk.Label(self.frame, text="Address:")
        self.address_label.grid(row=3, column=0, padx=10, pady=5, sticky="w")

        self.address_entry = ttk.Entry(self.frame, width=30)
        self.address_entry.grid(row=3, column=1, padx=10, pady=5, sticky="w")

        self.add_button = ttk.Button(self.frame, text="Add Contact", command=self.add_contact)
        self.add_button.grid(row=4, column=0, columnspan=2, pady=10)

        self.view_button = ttk.Button(self.frame, text="View Contacts", command=self.view_contacts)
        self.view_button.grid(row=5, column=0, columnspan=2, pady=10)

        self.search_label = ttk.Label(self.frame, text="Search:")
        self.search_label.grid(row=6, column=0, padx=10, pady=5, sticky="w")

        self.search_entry = ttk.Entry(self.frame, width=30)
        self.search_entry.grid(row=6, column=1, padx=10, pady=5, sticky="w")

        self.search_button = ttk.Button(self.frame, text="Search", command=self.search_contact)
        self.search_button.grid(row=7, column=0, columnspan=2, pady=10)

        self.update_button = ttk.Button(self.frame, text="Update Contact", command=self.update_contact)
        self.update_button.grid(row=8, column=0, columnspan=2, pady=10)

        self.delete_button = ttk.Button(self.frame, text="Delete Contact", command=self.delete_contact)
        self.delete_button.grid(row=9, column=0, columnspan=2, pady=10)

    def add_contact(self):
        name = self.name_entry.get().strip()
        phone = self.phone_entry.get().strip()
        email = self.email_entry.get().strip()
        address = self.address_entry.get().strip()

        if name and phone:
            if name not in self.contacts:
                self.contacts[name] = {"Phone": phone, "Email": email, "Address": address}
                messagebox.showinfo("Success", "Contact added successfully!")
            else:
                messagebox.showwarning("Warning", f"Contact with name '{name}' already exists.")
        else:
            messagebox.showwarning("Warning", "Name and phone number are required fields.")

    def view_contacts(self):
        if not self.contacts:
            messagebox.showinfo("Contact List", "No contacts available.")
            return

        contact_list = "\n".join([f"{name}: {details['Phone']}" for name, details in self.contacts.items()])
        messagebox.showinfo("Contact List", contact_list)

    def search_contact(self):
        search_term = self.search_entry.get().strip().lower()
        results = []

        for name, details in self.contacts.items():
            if search_term in name.lower() or search_term in details["Phone"]:
                results.append(f"{name}: {details['Phone']}")

        if results:
            contact_list = "\n".join(results)
            messagebox.showinfo("Search Results", contact_list)
        else:
            messagebox.showinfo("Search Results", "No matching contacts found.")

    def update_contact(self):
        name = self.name_entry.get().strip()
        phone = self.phone_entry.get().strip()
        email = self.email_entry.get().strip()
        address = self.address_entry.get().strip()

        if name in self.contacts:
            self.contacts[name] = {"Phone": phone, "Email": email, "Address": address}
            messagebox.showinfo("Success", "Contact updated successfully!")
        else:
            messagebox.showwarning("Warning", f"Contact with name '{name}' not found.")

    def delete_contact(self):
        name = self.name_entry.get().strip()

        if name in self.contacts:
            del self.contacts[name]
            messagebox.showinfo("Success", "Contact deleted successfully!")
        else:
            messagebox.showwarning("Warning", f"Contact with name '{name}' not found.")


if __name__ == "__main__":
    window = tk.Tk()
    app = ContactManager(window)
    window.mainloop()
